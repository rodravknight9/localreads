@using LocalReads.Components
@using LocalReads.Services
@using LocalReads.State
@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@inject IOpenLibraryService GoogleBooksService
@inject AppState AppState
@inject NavigationManager Navigation
@inject IAuthService AuthService

<MudAppBar Style="padding: 10px 70px">
    <MudText Typo="Typo.h5">LocalReads</MudText>
    <AuthorizeView>
        <Authorized>
            <a href="/mybooks" Class="custom-link d-flex justify-center align-center">
                Home
            </a>
            <a href="/wishlist" Class="custom-link d-flex justify-center align-center">
                My Books
            </a>
            <a href="/wishlist" Class="custom-link d-flex justify-center align-center">
                My Server
            </a>
        </Authorized>
    </AuthorizeView>
    <SearchBox OnSearch="HandleSearch"/>
    <MudSpacer/>
    <AuthorizeView>
        <Authorized>
            <a href="/" @onclick="LogOut" Class="custom-link d-flex justify-center align-center">
                <MudIcon Icon="@Icons.Material.Outlined.Logout" Title="LogOut"/>
            </a>
            <MudAvatar Color="Color.Secondary" Class="cursor-default">@GetUsernameFirstLetter()</MudAvatar>
        </Authorized>
        <NotAuthorized>
            <MudIcon
                Icon="@Icons.Material.Outlined.Login"
                Title="Log In"
                Size="Size.Large"
                @onclick="HandleClick"/>
        </NotAuthorized>
    </AuthorizeView>
</MudAppBar>

@code {
    private async Task HandleSearch(string term)
    {
        var test = await GoogleBooksService.GetBySearch(term);
        Console.WriteLine($"Search for: {term}");
    }

    private void HandleClick()
    {
        Navigation.NavigateTo("/login");
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
        AppState.UserState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.UserState.OnChange -= StateHasChanged;
    }

    private string GetUsernameFirstLetter()
    {
        return AppState.UserState.User.UserName.Substring(0, 1).ToUpper();
    }

    private async Task LogOut()
    {
        await AuthService.Logout();
    }

}