
@inject IDialogService DialogService
@inject IHttpRequest HttpRequest
@inject IAuthService AuthService 
@inject AppState AppState

<MudCard Class="d-flex flex-row" Style="min-width: 300px; height: 150px; margin: 12px">
    <MudCardMedia Class="media-horizontal" Image="@Book.ImageLink" Style="width: 100px; height: 100%"/>
    <MudCardContent Style="max-width: 200px">
        <MudText Typo="Typo.subtitle2" Truncate="true">@Book.Title</MudText>
        <MudText Typo="Typo.subtitle2" Color="Color.Secondary" Truncate="true">@Book.Authors</MudText>
        <MudCardActions Class="d-flex justify-end">
            <MudMenu 
                StartIcon="@Icons.Material.Filled.More" 
                Color="Color.Dark" 
                Variant="Variant.Text"
                Label="More"
                >
                <MudMenuItem @onclick="AddToFavorites">Add to the Wishlist</MudMenuItem>
                <MudMenuItem @onclick="AddToFavorites">Mark as In Progress</MudMenuItem>
                <MudMenuItem @onclick="AddToFavorites">Add as Read</MudMenuItem>
            </MudMenu>
        </MudCardActions>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public BookDto Book { get; set; } 

    private async Task AddToFavorites()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var paramsDialog = new DialogParameters
        {
            { "BookTitle", Book.Title }
        };
        var dialog = await DialogService.ShowAsync<AddToWishlistDialog>("Wishlist", paramsDialog, options);
        var result = await dialog.Result;

        await AuthService.PersistLoggedInUser();

        if (result != null && !result.Canceled)
        {
            var book = new Book
            {
                Authors = Book.Authors,
                Categories = Book.Categories,
                Description = Book.Description,
                ImageLink = Book.ImageLink,
                BookGoogleId = Book.BookGoogleId,
                Language = Book.Language,
                PageCount = Book.PageCount,
                PublishedDate = Book.PublishedDate, 
                Publisher = Book.Publisher,
                Title = Book.Title
            };

            var favoriteBook = new CreateFavorite();
            favoriteBook.State = (int)BookState.InProgress;
            favoriteBook.Progress = 0;
            favoriteBook.Book = book;
            favoriteBook.UserId = AppState.UserState.User.Id;

            await HttpRequest.SimplePost(favoriteBook, "/favorite");
        }
    }
}