@page "/searchbooks"
@using System.Text.RegularExpressions
@using LocalReads.Shared.DataTransfer.GoogleBooks
@inject IDialogService DialogService
@inject IAuthService AuthService
@inject IHttpRequest HttpRequest
@inject AppState AppState

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Elevation="3" Class="pa-6">
        <MudStack Direction="Row" AlignItems="AlignItems.Center" JustifyContent="SpaceBetween" Class="mb-4">
            <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                @if (!string.IsNullOrWhiteSpace(AppState.SearchResults.TermSearch))
                {
                    <span>for "<b>@AppState.SearchResults.TermSearch</b>"</span>
                }
            </MudText>
        </MudStack>
        <MudDivider Class="mb-4" />

        @* @if (AppState.SearchResults.Books == null || !AppState.SearchResults.Books.Any()) *@
        @if (string.IsNullOrEmpty(AppState.SearchResults.TermSearch))
        {
            <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center" Class="my-8">
                No books found. Try a different search term.
            </MudText>
        }
        else
        {
            <MudTable @ref="_table"
                      Items="@AppState.SearchResults.Books"
                      Hover="true"
                      Striped="true"
                      Dense="false"
                      Breakpoint="Breakpoint.Sm"
                      LoadingProgressColor="Color.Info"
                      HorizontalScrollbar="true"
                      Height="550px"
                      FixedHeader="true"
                      Elevation="1"
                      ServerData="TableReload">
                <HeaderContent>
                    <MudTh>Cover</MudTh>
                    <MudTh>Title</MudTh>
                    <MudTh>Authors</MudTh>
                    <MudTh>Publisher</MudTh>
                    <MudTh>Page Count</MudTh>
                    <MudTh>Published Date</MudTh>
                    <MudTh>Categories</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudImage Src="@(!string.IsNullOrWhiteSpace(context.ImageLink) ? context.ImageLink : "images/placeholder-book.png")"
                                  Width="40" Alt="Book cover" />
                    </MudTd>
                    <MudTd>@context.Title</MudTd>
                    <MudTd>@context.Authors</MudTd>
                    <MudTd>@context.Publisher</MudTd>
                    <MudTd>@context.PageCount</MudTd>
                    <MudTd>@context.PublishedDate</MudTd>
                    <MudTd>@context.Categories</MudTd>
                    <MudTd Class="d-flex align-center">
                        <MudTooltip Text="Add to Want to Read">
                            <MudIconButton Icon="@Icons.Material.Filled.BookmarkAdd" Color="Color.Info" OnClick="@(e => AddToFavorites(context, BookState.WantToRead))" />
                        </MudTooltip>
                        <MudTooltip Text="Mark as In Progress">
                            <MudIconButton Icon="@Icons.Material.Filled.AutoStories" Color="Color.Primary" OnClick="@(e => AddToFavorites(context, BookState.InProgress))" />
                        </MudTooltip>
                        <MudTooltip Text="Add as Read">
                            <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" OnClick="@(e => AddToFavorites(context, BookState.AlreadyRead))" />
                        </MudTooltip>
                        <MudTooltip Text="Add as Abandoned">
                            <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" OnClick="@(e => AddToFavorites(context, BookState.Abandoned))" />
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </MudPaper>
</MudContainer>

@code
{
    private MudTable<BookDto> _table;
    private int _guardOldPageIndex = -1;
    private string _guardOldSearch = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AppState.SearchResults.OnTermSearchChange += StateHasChanged;
        AppState.SearchResults.OnBooksSearchChanged += TriggerReload;
        if (AppState.UserState.User == null)
        {
            await AuthService.PersistLoggedInUser();
        }

    }

    public void Dispose()
    {
        AppState.SearchResults.OnTermSearchChange -= StateHasChanged;
        AppState.SearchResults.OnBooksSearchChanged -= TriggerReload;
    }

    private async Task AddToFavorites(BookDto book, BookState listType)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var paramsDialog = new DialogParameters
        {
            { "BookTitle", book.Title },
            { "ListType", listType.ToString() }
        };

        var dialog = await DialogService.ShowAsync<AddToListDialog>("", paramsDialog, options);
        var result = await dialog.Result;
        if (result != null && result.Canceled)
        {
            return;    
        }

        var dialogData = (CreateFavorite)result!.Data!;
        await AuthService.PersistLoggedInUser();

        var bookToAdd = BookDto.ToBookDomain(book);
        var favoriteBook = new CreateFavorite();
        favoriteBook.Book = bookToAdd;
        favoriteBook.UserId = AppState.UserState.User.Id;
        favoriteBook.State = (int)listType;
        favoriteBook.ReadTime = dialogData.ReadTime;
        favoriteBook.Progress = dialogData.Progress;

        await HttpRequest.SimplePost(favoriteBook, "/favorite");

    }

    private async Task<TableData<BookDto>> TableReload(TableState state, CancellationToken token)
    {
        try
        {
            if (AppState.SearchResults == null || string.IsNullOrEmpty(AppState.SearchResults.TermSearch))
            {
                return new TableData<BookDto>()
                {
                    Items = null ,
                    TotalItems = 0
                };
            }

            var booksData = (await HttpRequest.Get<Root>($"/googlebooks/range/{AppState.SearchResults.TermSearch}/{state.Page}/{state.PageSize}"))
                .Content;

            var items = booksData.Items.Select(BookDto.FromBook);

            if (_guardOldPageIndex != state.Page && !_guardOldSearch.Equals(AppState.SearchResults.TermSearch))
            {
                AppState.SearchResults.SetSearchResults(items.ToList());
                _guardOldPageIndex = state.Page;
                _guardOldSearch = AppState.SearchResults.TermSearch;
            }

            return new TableData<BookDto>()
            {
                TotalItems = booksData.TotalItems,
                Items = items
            };
        }
        catch (Exception e)
        {
            return new TableData<BookDto>()
            {
                Items = AppState.SearchResults.Books,
                TotalItems = AppState.SearchResults.Books.Count()
            };
        }        

    }

    private async void TriggerReload()
    {
        await InvokeAsync(async () =>
        {
            if (_table != null)
            {
                await _table.ReloadServerData();
                StateHasChanged();
            }
        });
    }

}
