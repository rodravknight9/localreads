@page "/mybooks"
@using LocalReads.Shared.DataTransfer.Favorites
@inject IDialogService DialogService
@inject IHttpRequest HttpRequest
@inject IAuthService AuthService
@inject AppState AppState

<MudElement Class="d-flex flex-row">

    <MudSelect Style="width: 200px; max-width: 200px; margin-right: 10px;"
        Variant="Variant.Outlined"
        T="string"
        Value="@_listType"
        ValueChanged="OnCategoryChanged"
    >
        <MudSelectItem Value="@BookState.WantToRead.ToString()">Want To Read</MudSelectItem>
        <MudSelectItem Value="@BookState.AlreadyRead.ToString()">Already read</MudSelectItem>
        <MudSelectItem Value="@BookState.InProgress.ToString()">In Progress</MudSelectItem>
        <MudSelectItem Value="@BookState.Abandoned.ToString()">Abandoned</MudSelectItem>
        <MudSelectItem Value="@BookState.Abandoned.ToString()">My Server</MudSelectItem>
    </MudSelect>

    <MudTable 
        @ref="_favTable"
        Items="@_favorites" 
        Hover="true" 
        Breakpoint="Breakpoint.Sm" 
        LoadingProgressColor="Color.Info"
        HorizontalScrollbar="true"
        Height="600px"
        FixedHeader="true" 

    >
        <HeaderContent>
            <MudTh>Cover</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Authors</MudTh>
            <MudTh>Rating</MudTh>
            <MudTh>Average Rating</MudTh>
            @if (_listType.Equals(BookState.InProgress.ToString()))
            {
                <MudTh>Progress</MudTh>
            }
            else
            {
                <MudTh>Date Read</MudTh>
            }
            <MudTh>Comments</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudImage Src="@context.Book.ImageLink" Width="40" /></MudTd>
            <MudTd DataLabel="Nr">@context.Book.Title</MudTd>
            <MudTd DataLabel="Nr">@context.Book.Authors</MudTd>
            <MudTd DataLabel="Nr">
                <MudElement Class="d-flex align-center">
                    <MudIcon 
                        Class="cursor-pointer" 
                        Icon="@Icons.Material.Filled.Star" 
                        Color="Color.Warning" Title="Favorite" 
                        @onclick="@( e => RateBook(@context))"
                        />
                    <MudText Typo="Typo.body2">@context.Rating</MudText>
                </MudElement>
            </MudTd>
            <MudTd DataLabel="Nr">
                <MudElement Class="d-flex align-center">
                    <MudIcon 
                        Class="cursor-pointer"
                        Icon="@Icons.Material.Filled.Star"
                        Color="Color.Warning" Title="Favorite"/>
                    <MudText Typo="Typo.body2">@context.AverageRating</MudText>
                </MudElement>
            </MudTd>

            @if (_listType.Equals(BookState.InProgress.ToString()))
            {
                <MudTd DataLabel="Nr" @onclick="@(e => UpdateProgress(@context))" Class="cursor-pointer">
                    <MudText>@context.Progress %</MudText>
                    <MudProgressLinear Color="Color.Primary" Size="Size.Small" Value="@context.Progress" />
                </MudTd>
            }
            else
            {
                <MudTd DataLabel="Nr">@FormatDate(@context.ReadTime)</MudTd>
            }
            
            <MudTd DataLabel="Nr"><a style="color:blue; text-decoration: underline;">Add a comment</a></MudTd>
            <MudTd DataLabel="Nr" Class="d-flex align-center">
                <MudElement>
                    <a style="color:blue; text-decoration: underline">Edit</a> 
                    <a style="color:blue; text-decoration: underline">View</a>
                </MudElement>
                <MudIcon 
                    Class="cursor-pointer" 
                    Icon="@Icons.Material.Filled.Delete" 
                    Color="Color.Error"
                    @onclick="@(e => DeleteFavorite(@context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudElement>


@code {
    private List<GetFavorite> _favorites { get; set; } = new List<GetFavorite>();
    private string _listType = BookState.WantToRead.ToString();
    private MudTable<GetFavorite> _favTable;

    protected override async Task OnInitializedAsync()
    {
        //TODO: Get rid of this, need to be persisiting with the User State
        await AuthService.PersistLoggedInUser();
        var userId = AppState.UserState.User.Id;
        _favorites = (await HttpRequest.Get<List<GetFavorite>>($"/favorites/{userId}?type={_listType}")).Content;
    }

    private async Task RateBook(Favorite favorite)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var paramsDialog = new DialogParameters
        {
            { "BookTitle", favorite.Book.Title },
            { "Rating", favorite.Rating }
        };
        var dialog = await DialogService.ShowAsync<RateBookDialog>("", paramsDialog, options);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            var rate = (double)result.Data!;
            await AuthService.PersistLoggedInUser();
            var bookRating = new RateBook
            {
                FavoriteId = favorite.Id,
                Rating = rate,
                UserId = AppState.UserState.User.Id
            };
            await HttpRequest.SimplePost(bookRating, "/favorite/rate");

            var bookToUpdateInUi = _favorites.First(fav => fav.Id == favorite.Id);
            bookToUpdateInUi.Rating = rate;
        }
    }

    private string FormatDate(DateTime dateRead)
    {
        if (dateRead.Year >= 1900)
        {
            return dateRead.Date.ToString("MM/dd/yyyy");    
        }

        return "--";
    }

    private async Task DeleteFavorite(GetFavorite favorite)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var paramsDialog = new DialogParameters
        {
            { "Title", "Delete from list"},
            { "Message", $@"Are you sure you want to delete ""{favorite.Book.Title}""" },
            { "AfirmativeText", "Yes"},
            { "NegativeText", "No"},
            { "HasCancelEvent", true }
        };

        var dialog = await DialogService.ShowAsync<GenericDialog>(null, paramsDialog, options);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await HttpRequest.Delete($"/favorite/{favorite.Id}");
            _favorites.Remove(favorite);
        }
    }

    private async Task OnCategoryChanged(string listType)
    {
        if (_favTable != null)
        {
            _listType = listType;
            await AuthService.PersistLoggedInUser();
            var userId = AppState.UserState.User.Id;
            _favorites = (await HttpRequest.Get<List<GetFavorite>>($"/favorites/{userId}?type={listType}")).Content;
            await _favTable.ReloadServerData();       
        }
    }

    private async Task UpdateProgress(Favorite favorite)
    {
        var createFav = new CreateFavorite();
        createFav.Progress = favorite.Progress;
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var paramsDialog = new DialogParameters
        {
            { "BookTitle", favorite.Book.Title },
            { "ListType", BookState.InProgress.ToString() },
            { "Favorite", createFav }
        };

        var dialog = await DialogService.ShowAsync<AddToListDialog>("", paramsDialog, options);
        var result = await dialog.Result;
        if (result != null && result.Canceled)
        {
            return;
        }

        var dialogData = (CreateFavorite)result!.Data!;
        await AuthService.PersistLoggedInUser();

        var saveProgress = new SaveProgress
        {
            FavoriteId = favorite.Id,
            UserId = AppState.UserState.User.Id,
            Progress = dialogData.Progress
        };
        await HttpRequest.SimplePatch(saveProgress, "/favorite");
        var favToUpdateUi = _favorites.First(fav => fav.Id == favorite.Id);
        favToUpdateUi.Progress = dialogData.Progress;

    }
}