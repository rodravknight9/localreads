@page "/mybooks"
@using LocalReads.Shared.DataTransfer.Favorites
@inject IDialogService DialogService
@inject IHttpRequest HttpRequest
@inject IAuthService AuthService
@inject AppState AppState

<MudElement Class="d-flex flex-row">

    <MudElement>
        <MudList T="string">
            <MudListItem Text="In Progress" />
            <MudListItem Text="Read" />
            <MudListItem Text="Want to Read" />
            <MudListItem Text="Abandoned" />
            <MudListItem Text="Books in my Home" />
        </MudList>
    </MudElement>

    <MudTable 
        Items="@_favorites" 
        Hover="true" 
        Breakpoint="Breakpoint.Sm" 
        LoadingProgressColor="Color.Info"
        HorizontalScrollbar="true"
        Height="600px"
        FixedHeader="true" 

    >
        <HeaderContent>
            <MudTh>Cover</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Authors</MudTh>
            <MudTh>Rating</MudTh>
            <MudTh>Average Rating</MudTh>
            <MudTh>Date Read</MudTh>
            <MudTh>Comments</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudImage Src="@context.Book.ImageLink" Width="40" /></MudTd>
            <MudTd DataLabel="Nr">@context.Book.Title</MudTd>
            <MudTd DataLabel="Nr">@context.Book.Authors</MudTd>
            <MudTd DataLabel="Nr">
                <MudElement Class="d-flex align-center">
                    <MudIcon 
                        Class="cursor-pointer" 
                        Icon="@Icons.Material.Filled.Star" 
                        Color="Color.Warning" Title="Favorite" 
                        @onclick="@( e => RateBook(@context))"
                        />
                    <MudText Typo="Typo.body2">@context.Rating</MudText>
                </MudElement>
            </MudTd>
            <MudTd DataLabel="Nr">3.5</MudTd>
            <MudTd DataLabel="Nr">@FormatDate(@context.ReadTime)</MudTd>
            <MudTd DataLabel="Nr"><a style="color:blue; text-decoration: underline;">Add a comment</a></MudTd>
            <MudTd DataLabel="Nr" Class="d-flex align-center">
                <MudElement>
                    <a style="color:blue; text-decoration: underline">Edit</a> 
                    <a style="color:blue; text-decoration: underline">View</a>
                </MudElement>
                <MudIcon 
                    Class="cursor-pointer" 
                    Icon="@Icons.Material.Filled.Delete" 
                    Color="Color.Error"
                    @onclick="@(e => DeleteFavorite(@context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>


</MudElement>


@code {
    private List<Favorite> _favorites { get; set; } = new List<Favorite>();
    protected override async Task OnInitializedAsync()
    {
        //TODO: Get rid of this, need to be persisiting with the User State
        await AuthService.PersistLoggedInUser();
        var userId = AppState.UserState.User.Id;
        _favorites = (await HttpRequest.Get<List<Favorite>>($"/favorites/{userId}?type=InProgress")).Content;
    }

    private async Task RateBook(Favorite favorite)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var paramsDialog = new DialogParameters
        {
            { "BookTitle", favorite.Book.Title },
            { "Rating", favorite.Rating }
        };
        var dialog = await DialogService.ShowAsync<RateBookDialog>("", paramsDialog, options);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            var rate = (double)result.Data!;
            await AuthService.PersistLoggedInUser();
            var bookRating = new RateBook
            {
                FavoriteId = favorite.Id,
                Rating = rate,
                UserId = AppState.UserState.User.Id
            };
            await HttpRequest.SimplePost(bookRating, "/favorite/rate");

            var bookToUpdateInUi = _favorites.First(fav => fav.Id == favorite.Id);
            bookToUpdateInUi.Rating = rate;
        }
    }

    private string FormatDate(DateTime dateRead)
    {
        if (dateRead.Year >= 1900)
        {
            return dateRead.Date.ToString();    
        }

        return "--";
    }

    private async Task DeleteFavorite(Favorite favorite)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var paramsDialog = new DialogParameters
        {
            { "Title", "Delete from list"},
            { "Message", $@"Do you want to delete ""{favorite.Book.Title}""" },
            { "AfirmativeText", "Yes"},
            { "NegativeText", "No"},
            { "HasCancelEvent", true }
        };

        var dialog = await DialogService.ShowAsync<GenericDialog>(null, paramsDialog, options);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await HttpRequest.Delete($"/favorite/{favorite.Id}");
            _favorites.Remove(favorite);
        }
    }


}