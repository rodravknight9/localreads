@page "/mybooks"
@using LocalReads.Shared.DataTransfer.Favorites
@inject IDialogService DialogService
@inject IHttpRequest HttpRequest
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AppState AppState

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Elevation="3" Class="pa-6">
        <MudStack Row="true" AlignItems="AlignItems.Center" JustifyContent="SpaceBetween" Class="mb-4">
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="GoBack" Class="mb-6">Back</MudButton>
            <MudSpacer />
            <MudSelect Style="width: 220px;" Variant="Variant.Outlined" T="string" Value="@_listType" ValueChanged="OnCategoryChanged">
                <MudSelectItem Value="@BookState.WantToRead.ToString()">Want To Read</MudSelectItem>
                <MudSelectItem Value="@BookState.AlreadyRead.ToString()">Already Read</MudSelectItem>
                <MudSelectItem Value="@BookState.InProgress.ToString()">In Progress</MudSelectItem>
                <MudSelectItem Value="@BookState.Abandoned.ToString()">Abandoned</MudSelectItem>
            </MudSelect>
        </MudStack>
        <MudDivider Class="mb-4" />

        @if (_favorites == null || !_favorites.Any())
        {
            <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center" Class="my-8">
                No books in this list yet.
            </MudText>
        }
        else
        {
            <MudTable 
                @ref="_favTable"
                Items="@_favorites" 
                Hover="true" 
                Striped="true"
                Dense="false"
                Breakpoint="Breakpoint.Sm" 
                LoadingProgressColor="Color.Info"
                HorizontalScrollbar="true"
                Height="600px"
                FixedHeader="true"
                Elevation="1"
            >
                <HeaderContent>
                    <MudTh>Cover</MudTh>
                    <MudTh>Title</MudTh>
                    <MudTh>Authors</MudTh>
                    <MudTh>Rating</MudTh>
                    <MudTh>Average Rating</MudTh>
                    @if (_listType.Equals(BookState.InProgress.ToString()))
                    {
                        <MudTh>Progress</MudTh>
                    }
                    else
                    {
                        <MudTh>Date Read</MudTh>
                    }
                    <MudTh>Comments</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudImage Src="@(!string.IsNullOrWhiteSpace(context.Book.ImageLink) ? context.Book.ImageLink : "images/placeholder-book.png")" Width="40" Alt="Book cover" />
                    </MudTd>
                    <MudTd>
                        <MudLink @onclick="@(e => GoToBook(@context.Book.BookGoogleId))">@context.Book.Title</MudLink>
                    </MudTd>
                    <MudTd>@context.Book.Authors</MudTd>
                    <MudTd>
                        <MudElement Class="d-flex justify-center align-center">
                            <MudTooltip Text="Rate this book">
                                <MudIconButton Icon="@Icons.Material.Filled.Star" Color="Color.Warning" OnClick="@(e => RateBook(@context))"/>
                            </MudTooltip>
                            <MudText Typo="Typo.body2">@context.Rating</MudText>
                        </MudElement>
                    </MudTd>
                    <MudTd>
                        <MudElement Class="d-flex justify-center align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning"/>
                            <MudText Typo="Typo.body2">@context.AverageRating</MudText>
                        </MudElement>
                    </MudTd>
                    @if (_listType.Equals(BookState.InProgress.ToString()))
                    {
                        <MudTd @onclick="@(e => UpdateProgress(@context))" Class="cursor-pointer">
                            <MudText>@context.Progress %</MudText>
                            <MudProgressLinear Color="Color.Primary" Size="Size.Small" Value="@context.Progress" />
                        </MudTd>
                    }
                    else
                    {
                        <MudTd>@FormatDate(@context.ReadTime)</MudTd>
                    }
                    <MudTd>
                        <MudLink Style="color:blue; text-decoration: underline;">Add a comment</MudLink>
                    </MudTd>
                    <MudTd Class="d-flex align-center">
                        <MudTooltip Text="Edit">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
                        </MudTooltip>
                        <MudTooltip Text="View">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" />
                        </MudTooltip>
                        <MudTooltip Text="Delete">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(e => DeleteFavorite(@context))" />
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<GetFavorite> _favorites { get; set; } = new List<GetFavorite>();
    private string _listType = BookState.WantToRead.ToString();
    private MudTable<GetFavorite> _favTable;

    protected override async Task OnInitializedAsync()
    {
        _favorites = (await HttpRequest.Get<List<GetFavorite>>($"/favorites?type={_listType}")).Content;
    }

    private async Task RateBook(Favorite favorite)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var paramsDialog = new DialogParameters
        {
            { "BookTitle", favorite.Book.Title },
            { "Rating", favorite.Rating }
        };
        var dialog = await DialogService.ShowAsync<RateBookDialog>("", paramsDialog, options);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            var rate = (double)result.Data!;
            await AuthService.PersistLoggedInUser();
            var bookRating = new RateBook
            {
                FavoriteId = favorite.Id,
                Rating = rate,
                UserId = AppState.UserState.User.Id
            };
            await HttpRequest.SimplePost(bookRating, "/favorite/rate");

            var bookToUpdateInUi = _favorites.First(fav => fav.Id == favorite.Id);
            bookToUpdateInUi.Rating = rate;
        }
    }

    private string FormatDate(DateTime dateRead)
    {
        if (dateRead.Year >= 1900)
        {
            return dateRead.Date.ToString("MM/dd/yyyy");    
        }
        return "--";
    }

    private async Task DeleteFavorite(GetFavorite favorite)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var paramsDialog = new DialogParameters
        {
            { "Title", "Delete from list"},
            { "Message", $@"Are you sure you want to delete ""{favorite.Book.Title}""" },
            { "AfirmativeText", "Yes"},
            { "NegativeText", "No"},
            { "HasCancelEvent", true }
        };

        var dialog = await DialogService.ShowAsync<GenericDialog>(null, paramsDialog, options);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await HttpRequest.Delete($"/favorite/{favorite.Id}");
            _favorites.Remove(favorite);
        }
    }

    private async Task OnCategoryChanged(string listType)
    {
        if (_favTable != null)
        {
            _listType = listType;
            _favorites = (await HttpRequest.Get<List<GetFavorite>>($"/favorites?type={listType}")).Content;
            await _favTable.ReloadServerData();       
        }
    }

    private async Task UpdateProgress(Favorite favorite)
    {
        var createFav = new CreateFavorite();
        createFav.Progress = favorite.Progress;
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var paramsDialog = new DialogParameters
        {
            { "BookTitle", favorite.Book.Title },
            { "ListType", BookState.InProgress.ToString() },
            { "Favorite", createFav }
        };

        var dialog = await DialogService.ShowAsync<AddToListDialog>("", paramsDialog, options);
        var result = await dialog.Result;
        if (result != null && result.Canceled)
        {
            return;
        }

        var dialogData = (CreateFavorite)result!.Data!;
        await AuthService.PersistLoggedInUser();

        var saveProgress = new SaveProgress
        {
            FavoriteId = favorite.Id,
            UserId = AppState.UserState.User.Id,
            Progress = dialogData.Progress
        };
        await HttpRequest.SimplePatch(saveProgress, "/favorite");
        var favToUpdateUi = _favorites.First(fav => fav.Id == favorite.Id);
        favToUpdateUi.Progress = dialogData.Progress;
    }

    private void GoToBook(string googleBookId)
    {
        Navigation.NavigateTo($"/viewbook/{googleBookId}");
    }
    
    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }
}