@page "/"
@using LocalReads.Shared.DataTransfer.Notifications
@inject IHttpRequest HttpRequest
@inject AppState AppState
@inject IAuthService AuthService
@inject IDialogService DialogService
@inject NavigationManager Navigation

<MudGrid Class="px-4" Style="min-height: 600px;">
    <MudItem xs="12" md="5" lg="4">
        <MudPaper Elevation="3" Class="pa-6">
            <MudElement Class="d-flex flex-column">
                <MudText Typo="Typo.body1" Class="mb-4">Currently Reading</MudText>
                <div class="books-list pa-3">
                    @foreach (var fav in _favorites)
                    {
                        <MudElement Class="d-flex mb-2">
                            <MudImage Src="@fav.Book.ImageLink" Width="90" Height="130" Class="mr-2"/>
                            <MudElement Class="d-flex flex-column">
                                <MudLink
                                    Href="/"
                                    Underline="Underline.Always"
                                    Color="Color.Dark"
                                    Class="mb-1">@fav.Book.Title</MudLink>
                                <MudText Typo="Typo.body1">by @fav.Book.Authors</MudText>
                                <MudElement Class="mb-1">
                                    <MudProgressLinear
                                        Color="Color.Success"
                                        Size="Size.Medium" Value="@fav.Progress"/>
                                    <MudText Typo="Typo.body2">@fav.Progress %</MudText>
                                </MudElement>
                                <MudButton
                                    Variant="Variant.Outlined"
                                    Size="Size.Small"
                                    Color="Color.Secondary"
                                    FullWidth="false"
                                    @onclick="@(e => UpdateProgress(@fav))"
                                    Style="width: 200px">Update Progress</MudButton>
                            </MudElement>
                        </MudElement>
                    }
                </div>
            </MudElement>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="7" lg="6">
        <MudPaper Style="height:100%; min-height:500px;" Elevation="3" Class="pa-6">
            <MudElement Class="d-flex flex-column">
                <MudText Typo="Typo.body1" Class="mb-4">This Week</MudText>
                <div class="books-list pa-3">
                    @foreach (var not in _notifications)
                    {
                        <MudElement Class="d-flex pa-3 flex-column notification-list" Style="border-bottom: 2px solid #eee">
                            <MudText Typo="Typo.body1">@not.Message</MudText>
                            <MudText Typo="Typo.body2">@not.Date</MudText>
                        </MudElement>
                    }
                </div>
            </MudElement>
        </MudPaper>
    </MudItem>
</MudGrid>

<style>
    .books-list{
        max-height: 520px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: var(--mud-palette-primary) var(--mud-palette-background-grey);
    }
    
    .notification-list:hover {
        background-color: #eeeeee;
        cursor: pointer;
    }
</style>

@code {
    private List<Favorite> _favorites { get; set; } = [];
    private List<Notification> _notifications { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        if (!(await AuthService.IsLoggedIn()))
        {
            Navigation.NavigateTo("/login");
        }

        _favorites = (await HttpRequest.Get<List<Favorite>>($"/favorite/inprogress")).Content;
        _notifications = (await HttpRequest.Get<List<Notification>>("/notifications/week")).Content;
    }

    private async Task UpdateProgress(Favorite favorite)
    {
        var createFav = new CreateFavorite();
        createFav.Progress = favorite.Progress;
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var paramsDialog = new DialogParameters
        {
            { "BookTitle", favorite.Book.Title },
            { "ListType", BookState.InProgress.ToString() },
            { "Favorite", createFav }
        };

        var dialog = await DialogService.ShowAsync<AddToListDialog>("", paramsDialog, options);
        var result = await dialog.Result;
        if (result != null && result.Canceled)
        {
            return;
        }

        var dialogData = (CreateFavorite)result!.Data!;
        await AuthService.PersistLoggedInUser();

        var saveProgress = new SaveProgress
        {
            FavoriteId = favorite.Id,
            UserId = AppState.UserState.User.Id,
            Progress = dialogData.Progress
        };
        await HttpRequest.SimplePatch(saveProgress, "/favorite");
        var favToUpdateUi = _favorites.First(fav => fav.Id == favorite.Id);
        favToUpdateUi.Progress = dialogData.Progress;

    }

}